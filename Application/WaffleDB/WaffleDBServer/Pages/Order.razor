@page "/order"
@inject NavigationManager _navigationManager
@using WaffleDBServer.Pages.OrderPages
@using WaffleDBServer.Component
@using WaffleDB

<table>
    <tr>
        <td style="vertical-align: top;">
        @if (OrderType != OrderTypes.ShoppingCart)
        {
            <div class="sidebar">
                <OrderNavMenu @bind-OrderTypeValue="@OrderType"></OrderNavMenu>
            </div>
        }
        </td>
       
        <td style="width: 100%; vertical-align: top;">
            <div style="width: 100%;" class="content px-4">
                @switch (OrderType)
                {
                    case OrderTypes.OrderAdditions:
                        <OrderSelectAddition OrderedSomething=@HandelReceivedAddToShoppingCart />
                        break;
                    case OrderTypes.OrderPreMadeWaffles:
                        <OrderSelectPreMadeWaffle OrderedSomething=@HandelReceivedAddToShoppingCart />
                        break;
                    case OrderTypes.OrderSelfMadeWaffles:
                        <OrderSelectSelfMadeWaffle OrderedSomething=@HandelReceivedAddToShoppingCart />
                        break;
                    case OrderTypes.ShoppingCart:
                        <ShoppingCartView @bind-ShoppingCart="ShoppingCart" @bind-OrderTypeValue="OrderType" />
                        break;

                }
            </div>
        </td>
    </tr>

</table>
@if (OrderType != OrderTypes.ShoppingCart)
{
    <button disabled="@(ShoppingCart.SumOfCurrentProductsElemets == 0)" class="offsetButton" @onclick="@(() => OrderType = OrderTypes.ShoppingCart)">
        <ShoppingcartButton TotalItemAmount="@ShoppingCart.SumOfCurrentProductsElemets" />
    </button>
}


@code {



    protected int ItemAmount = 0;

    public OrderTypes OrderType = OrderTypes.OrderPreMadeWaffles;

    protected ShoppingCart ShoppingCart = new ShoppingCart();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }



    private void HandelReceivedAddToShoppingCart(Tuple<IProduct, int> value)
    {

        ItemAmount += value.Item2;

        if (ShoppingCart.ProductOrderList.Exists(p => p.Key.idProduct == value.Item1.idProduct))
        {
            int indexOfProduct = ShoppingCart.ProductOrderList.FindIndex(p => p.Key.idProduct == value.Item1.idProduct);
            ShoppingCart.ProductOrderList[indexOfProduct] = new KeyValuePair<IProduct, int>(value.Item1, value.Item2 + ShoppingCart.ProductOrderList[indexOfProduct].Value);
        }
        else
            ShoppingCart.ProductOrderList.Add(new KeyValuePair<IProduct, int>(value.Item1,value.Item2));
    }

}
