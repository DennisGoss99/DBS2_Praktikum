@using WaffleDB
@using WaffleDBServer.Component


<img id="banner" asp-append-version="true" src="Images/waffel_banner.png" />

@if (Products == null)
{
    <span style="font-size: large"><b>Loading...</b></span>
    <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Small" />
}
else
{

    <div style="padding-top: 24px;">
        @foreach (var item in Products)
        {
            <di @onclick="() => OpenDialog(item)">
                <ProductView Product="new Product(item.idProduct, item.idNuIn, item.price, item.name)"></ProductView>
            </di>
        }
    </div>

    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogContent>
            <p>Anzahl:</p>
            <div style="text-align: center">
                <button disabled="@(Amount == 1)" style="margin-right: 15px;" class="dot" @onclick="() => Amount--">
                    <MatIcon Style="transform: scale(0.7)" Icon="remove"></MatIcon>
                </button>
                <span>@Amount</span>
                <button style="margin-left: 15px;" class="dot" @onclick="() => Amount++">
                    <MatIcon Style="transform: scale(0.7)" Icon="add"></MatIcon>
                </button>
            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogIsOpen = false; LastClickedOnProduct = null; })">Abbrechen</MatButton>
            <MatButton OnClick="@OkClick">OK</MatButton>
        </MatDialogActions>
    </MatDialog>

}
@code {
    [Parameter]
    public EventCallback<Tuple<IProduct, int>> OrderedSomething { get; set; }

    protected List<ProductWaffle> Products = null;

    protected ProductWaffle LastClickedOnProduct = null;

    bool dialogIsOpen = false;
    int Amount = -1;

    protected override async Task OnInitializedAsync()
    {
        Products = await Task.Run(() => WaffleDBAPI.GetAllProductWaffles());
    }

    void OpenDialog(ProductWaffle product)
    {
        LastClickedOnProduct = product;
        Amount = 1;
        dialogIsOpen = true;
    }

    private async Task OkClick()
    {

        if (LastClickedOnProduct != null)
            await OrderedSomething.InvokeAsync(new Tuple<IProduct, int>(LastClickedOnProduct, Amount));

        dialogIsOpen = false;
    }

}
