@using WaffleDB

<img id="banner" asp-append-version="true" src="Images/waffel_create_banner.png" />
<br/>

@if (WaffleConstruction == null)
{
    <span style="font-size: large"><b>Loading...</b></span>
    <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Small" />
}
else
{
<table>
    @foreach (var ingredient in WaffleConstruction)
    {
        <tr style="background: #F9F6F6">
            <td style="padding-left: 10px;" class="tableColumn">
                <p>@ingredient.Key.name <b style="font-size: 9px;">( + @ingredient.Key.price €) @ingredient.Key.unit</b></p>
            </td>
            <td class="tableColumn">
                <div style="text-align: center;">
                    <button disabled="@(ingredient.Value == 0)" style="margin-right: 15px;" class="dot" @onclick="()=> WaffleConstruction[ingredient.Key] = ingredient.Value - 1">
                        <MatIcon Style="transform: scale(0.7)" Icon="remove"></MatIcon>
                    </button>
                    <span>@ingredient.Value</span>
                    <button style="margin-left: 15px;" class="dot" @onclick="()=> WaffleConstruction[ingredient.Key] = ingredient.Value + 1 ">
                        <MatIcon Style="transform: scale(0.7)" Icon="add"></MatIcon>
                    </button>
                </div>
            </td>

            <td style="padding-left: 20px; padding-right: 10px;" class="tableColumn">
                <p style="font-size: small">@((ingredient.Key.price * ingredient.Value).ToString("F2"))  €</p>
            </td>
        </tr>
    }
<tr style="background: #F0F0F0; height: 2px;">
    <td></td>
    <td></td>
    <td></td>
</tr>
    <tr style="background: #F9F6F6">
        <td class="tableColumn"></td>
        <td class="tableColumn"> Gesamtpreis:</td>
        <td style="padding-left: 20px;" class="tableColumn">
            <p style="font-size: small">@((WaffleConstruction.Sum(w => w.Key.price * w.Value)).ToString("F2"))  €</p>
        </td>
    </tr>
</table>

    




    <button disabled="@(WaffleConstruction.All(i => i.Value == 0))" style="margin-top: 5px; margin-bottom: 10px;" class="buttonS2" @onclick="OpenDialog">
        <span>Waffel hinzufügen</span>
        <MatIcon Style=" position: relative; top:5px; transform: scale(0.8);" Icon="playlist_add"></MatIcon>
    </button>



    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogContent>
            <p>Anzahl:</p>
            <div style="text-align: center">
                <button disabled="@(Amount == 1)" style="margin-right: 15px;" class="dot" @onclick="()=> Amount--">
                    <MatIcon Style="transform: scale(0.7)" Icon="remove"></MatIcon>
                </button>
                <span>@Amount</span>
                <button style="margin-left: 15px;" class="dot" @onclick="()=> Amount++">
                    <MatIcon Style="transform: scale(0.7)" Icon="add"></MatIcon>
                </button>
            </div>
            <MatTextField Style="margin-top: 10px;" Label="Name der Waffle" @bind-Value="Name"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogIsOpen = false; })">Abbrechen</MatButton>
            <MatButton OnClick="@OkClick">OK</MatButton>
        </MatDialogActions>
    </MatDialog>


}

@code {

    [Parameter]
    public EventCallback<Tuple<IProduct, int>> OrderedSomething { get; set; }

    protected Dictionary<Ingredient, int> WaffleConstruction;

    bool dialogIsOpen = false;
    int Amount = -1;

    string Name = "Eigene Waffle";  

    void OpenDialog()
    {


        Amount = 1;
        dialogIsOpen = true;
    }

    private async Task OkClick()
    {


        var waffleIngredientList = WaffleConstruction.Where(k => k.Value != 0).Select(k => new KeyValuePair<int,int>(k.Key.idIngredient,k.Value)).ToList();

        var waffle = WaffleDBAPI.CreateCustomWaffle(Name, waffleIngredientList.ToList());

        await OrderedSomething.InvokeAsync( new Tuple<IProduct, int>(waffle, Amount));

        dialogIsOpen = false;
    }


    protected override async Task OnInitializedAsync()
    {

        List<Ingredient> ingredients = await Task.Run(() => WaffleDBAPI.GetAllIngredientWaffleExtra());

        WaffleConstruction = ingredients.Select((i) =>
            new KeyValuePair<Ingredient, int>(i, 0)
        ).ToDictionary(x=>x.Key, x=>x.Value);

        await base.OnInitializedAsync();
    }



}
