@inject NavigationManager _navigationManager
@using WaffleDB

<div style="margin: 10px;" @onclick="() => UpdateOrderTypeValue(OrderTypes.OrderPreMadeWaffles)">
    <img src="Images/waffelDB_NoOuterText.png" asp-append-version="true" width="40" />
    <b style="margin-left: 10px; color: lightblue"> &#60-zurück</b>
</div>

<div style="background: #F9F9F9; padding: 20px; padding-bottom: 0; padding-top: 1.1rem;">
    <MatIcon Icon="shopping_cart"></MatIcon>
    <b style="font-size: 25px;">Warenkorb:</b>
    <MatDivider></MatDivider>

    <table style="width: 100%">
        @foreach (var item in ShoppingCart.ProductOrderList)
        {
            <tr style="background: #F0F0F0">
                <td style="padding-left: 10px;" class="tableColumn">
                    <p>@item.Key.name <b style="font-size: 9px;">( x @item.Value)</b></p>
                </td>

                <td style="padding-left: 20px; padding-right: 10px;" class="tableColumn">
                    <p style="font-size: small">@((item.Key.price * item.Value).ToString("F2"))  €</p>
                </td>
            </tr>
        }
        <tr style="background: #F0F0F0; height: 2px;">
            <td></td>
            <td></td>
        </tr>
        <tr style="background: #F0F0F0">
            <td style="padding-left: 10px;"  class="tableColumn"> <b>Gesamtpreis:</b></td>
            <td style="padding-left: 20px;" class="tableColumn">
                <p style="font-size: small"><b>@((ShoppingCart.ProductOrderList.Sum(w => w.Key.price * w.Value)).ToString("F2"))  €</b></p>
            </td>
        </tr>
    </table>
</div>
<div style="text-align: right;">
    <button style="margin: 10px; margin-right: 20px;" class="buttonS2" @onclick="FinishOrderFunc">
        <span>Bestellen</span>
        <MatIcon Style=" position: relative; top:5px; transform: scale(0.8);" Icon="payment"></MatIcon>
    </button>
</div>



@code {

    [Parameter]
    public ShoppingCart ShoppingCart { get; set; }

    [Parameter]
    public EventCallback<ShoppingCart> ShoppingCartChanged { get; set; }

    protected async Task UpdateShoppingCart(ShoppingCart shoppingCart)
    {
        ShoppingCart = shoppingCart;
        await ShoppingCartChanged.InvokeAsync(ShoppingCart);
    }

    [Parameter]
    public OrderTypes OrderTypeValue { get; set;}

    [Parameter]
    public EventCallback<OrderTypes> OrderTypeValueChanged { get; set; }

    protected async Task UpdateOrderTypeValue(OrderTypes orderType)
    {
        OrderTypeValue = orderType;
        await OrderTypeValueChanged.InvokeAsync(OrderTypeValue);
    }

    private const int StoreId = 1;


    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected void FinishOrderFunc()
    {
        ShoppingCart.FinishOrder(StoreId);
        _navigationManager.NavigateTo("/order/f");
    }

}
